package basic.day20200319;
/*
内部类：一个类的内部定义了另一个类

分类：
1. 成员内部类
2. 局部内部类（包含匿名内部类）
*/


/*
成员内部类：
修饰符 类名称{
    修饰符 类名称{}
}
格式：内部类可随意访问外部类的属性，外部类访问内部类必须通过内部类对象进行访问
访问方式：
1.在外部类内部创建内部类对象使用
2.使用 外部类.内部类 创建对象: 外部类.内部类 变量名 = new 外部类().new 内部类()

在内部类访问外部类成员：外部类.this.变量名

 */

/*
局部内部类：一个类定义在方法内部，只有当前方法才能使用它(不需要修饰符)
修饰符 返回值类型 方法名(参数列表) {
    class   局部内部类名称{
        //  ...
    }
}

局部内部类访问所在方法所在的局部变量，那么这个局部变量必须是【等效final】的，
即如果没有用final关键字，那么该变量也不可变，
这与其生命周期有关：new的对象在堆中等待垃圾回收，变量在栈中随着方法死去

*/

/*
匿名内部类：只需要使用一次的类，无需类名，通过接口实现
构造方法：使用静态代码块，或调用父类的同参构造方法
格式：
接口 对象名 = new 接口(){
    // 构造方法：使用静态代码块，或调用父类的同参构造方法
    // 覆盖重写所有抽象方法
}

注意事项：

 */
/*


类权限修饰符的使用：
外部类：public (default)
成员内部类： public protected (default) private
局部内部类：无
 */
public class InnerClass {

}

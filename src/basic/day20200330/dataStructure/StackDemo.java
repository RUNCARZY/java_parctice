package basic.day20200330.dataStructure;
/*
栈stack：先进后出FILO
队列queue：先进先出FIFO
数组list：查询快（地址连续，索引访问），增删慢（长度固定，增删需要另外创建数组对象）
链表linked list: 查询慢（地址非连续），增删快（改变节点指向即可）


二叉树：每个节点分支不超过2个的树
排序树/查找树：在二叉树的基础上，元素有大小顺序，左小右大
平衡树：左子树与右子树数量相等
不平衡树：左子树与右子树数量不相等

红黑树：接近于平衡树，查询速度快，查询叶子节点最大次数和最小次数不能超过2倍
约束：
节点分为红色和黑色，
根节点为黑色，
叶子节点（在java中指null节点）是黑色的，
每个红色的节点的子节点都是黑色的（不能有两个连续的红色子节点）
任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同

 */
public class StackDemo {
}
